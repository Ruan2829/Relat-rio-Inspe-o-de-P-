# Importa bibliotecas
import streamlit as st  # Streamlit para interface web
from fpdf import FPDF  # FPDF para gera√ß√£o do PDF
import os  # Biblioteca para manipula√ß√£o de arquivos
from PIL import Image   # Biblioteca para manipula√ß√£o de imagens

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(page_title="Relat√≥rio de Inspe√ß√£o", layout="centered")  # T√≠tulo e layout da p√°gina
st.title("üìÑ Relat√≥rio de Inspe√ß√£o de P√°s")  # T√≠tulo principal

# Classe PDF personalizada
class PDF(FPDF):
    def header(self):
        # Verifica se o arquivo da logo existe e insere a imagem no canto superior esquerdo (x=10, y=10, largura=30mm)
        if os.path.exists("logo_iqony.png"):
            self.image("logo_iqony.png", x=15, y=15, w=25)  # Adiciona a logo da empresa

        # Define a posi√ß√£o e fonte do t√≠tulo central do relat√≥rio
        self.set_xy(10, 10)                       # Define a posi√ß√£o (x=40, y=10) para o t√≠tulo
        self.set_font("Arial", "B", 16)           # Define a fonte Arial, negrito, tamanho 12
        self.cell(190, 40, "Relat√≥rio de Inspe√ß√£o de P√°s", border=1, ln=1, align="C")  # Linha 1 do t√≠tulo centralizada
        self.ln(5)                            # Adiciona uma quebra de linha ap√≥s o t√≠tulo


        self.ln(5)
# ------------------------- Rodap√© do PDF Com imagem-------------------------------------
    def footer(self):
        # Adiciona imagem no canto inferior esquerdo
        if os.path.exists("wind_turbine_draw.png"):
            self.image("wind_turbine_draw.png", x=10, y=260, w=40)  # Ajuste 'x', 'y' e 'w' conforme o necess√°rio

        # Texto do rodap√©
        self.set_y(-10)
        self.set_font("Arial", "I", 7)
        self.multi_cell(
            0, 4,      # Texto do rodap√©, 0 largura, 6 altura
            "Este documento √© de propriedade da Iqony Solutions do Brasil LTDA. Nenhuma parte deste documento pode\n"
            "ser distribu√≠da sem sua permiss√£o pr√©via por escrito.",
            border=0, align="C"
            
        )
        # N√∫mero da p√°gina centralizado
        # N√∫mero da p√°gina no formato "P√°gina X de Y"
        self.set_y(-10)  # Ajusta posi√ß√£o
        self.cell(0, 10, f"P√°gina {self.page_no()} de {{nb}}", align="R") # adiciona um rodap√© ao documento, mostrando o n√∫mero da p√°gina atual e o total de p√°ginas, como por exemplo: "P√°gina 3 de 10"

# ------------------------------------------- Aera Deparatamento REspon
    def primeira_pagina(self, ambito_aplicacao, codigo_relatorio, revisado_por_1, revisado_por_2, data_revisao):
        self.set_font("Arial", "B", 12)
        self.multi_cell(0, 50, f"Departamento Respons√°vel: O&M.\n√Çmbito da aplica√ß√£o: {ambito_aplicacao}", border=1)
        self.ln(10)
        self.cell(95, 10, f"N√∫mero: {codigo_relatorio}", 1)
        self.set_font("Arial", "", 10)
        self.cell(95, 10, "(Revis√£o) 02", 1, ln=True)

        self.set_font("Arial", "B", 10)
        self.cell(45, 10, "", 1)
        self.cell(80, 10, "(Assinatura):", 1)
        self.cell(65, 10, "Data:", 1, ln=True)

        self.set_font("Arial", "B", 10)
        linhas = [
            ["Elaborado por:", "Ruan Lopes da Silva", "12/04/2025"],
            ["Revisado por:", revisado_por_1, data_revisao],
            ["Revisado por:", revisado_por_2, data_revisao],
            ["Aprovado por:", "", ""]
        ]
        for linha in linhas:
            self.cell(45, 10, linha[0], 1)
            self.cell(80, 10, linha[1], 1)
            self.cell(65, 10, linha[2], 1, ln=True)

# --------------------------------- Sum√°rio ---------------------------------------------------
    def pagina_sumario(self): #
        self.add_page()
        self.set_font("Arial", "B", 14)
        self.cell(0, 10, "Sum√°rio", ln=True, align="C")
        self.ln(5)

        self.set_font("Arial", "B", 12)
        topicos = [
            "1. Introdu√ß√£o",
            "2. Objetivo",
            "3. Dados Gerais do Aerogerador",
            "4. Dados Gerais das P√°s",
            "5. Nomenclaturas",
            "6. Itens das p√°s a serem inspecionados",
            "7. Refer√™ncia da Avalia√ß√£o de defeitos",
            "8. Identifica√ß√£o da M√°quina",
            "9. Especifica√ß√£o e identifica√ß√£o das p√°s",
            "10. Inspe√ß√£o Externa",
            "  10.1. Classifica√ß√£o de defeitos evidenciados na √°rea externa da p√° 1",
            "  10.2. Classifica√ß√£o de defeitos evidenciados na √°rea externa da p√° 2",
            "  10.3. Classifica√ß√£o de defeitos evidenciados na √°rea externa da p√° 3",
            "11. Inspe√ß√£o interna",
            "  11.1. Classifica√ß√£o de defeitos evidenciados na √°rea interna da p√° 1",
            "  11.2. Classifica√ß√£o de defeitos evidenciados na √°rea interna da p√° 2",
            "  11.3. Classifica√ß√£o de defeitos evidenciados na √°rea interna da p√° 3",
        ]
        for item in topicos:
            self.cell(0, 8, item, ln=True)

    def pagina_dados(self, dados_gerais, dados_pas):
        self.add_page()
        self.set_font("Arial", "B", 12)
        self.cell(0, 10, "1. Introdu√ß√£o", ln=True)
        self.set_font("Arial", "", 11)
        self.multi_cell(0, 8,
            "A atividade contratada consiste na inspe√ß√£o das p√°s, realizada nas cascas externas, bordas de ataque e de fuga, "
            "e em toda a extens√£o das p√°s. A an√°lise e classifica√ß√£o dos defeitos, bem como a avalia√ß√£o dos reparos, foram "
            "realizadas pela equipe de servi√ßos de O&M da IQONY.")
        self.ln(5)

        self.set_font("Arial", "B", 12)
        self.cell(0, 10, "2. Objetivo", ln=True)
        self.set_font("Arial", "", 11)
        self.multi_cell(0, 8,
            "Este relat√≥rio tem como objetivo apresentar os dados de uma inspe√ß√£o de p√°s, realizada no aerogerador WEG modelo "
            "AGW 110 2.1MW, localizado nos parques e√≥licos Cutia e Bento Miguel. As evid√™ncias t√™m por finalidade documentar o "
            "estado operacional das p√°s.")
        self.ln(5)

        self.set_font("Arial", "B", 12)
        self.cell(0, 10, "3. Dados Gerais do Aerogerador", ln=True)
        self.set_font("Arial", "", 11)
        for rotulo, valor in dados_gerais.items(): # 
            self.cell(60, 10, rotulo, border=1)
            self.cell(130, 10, valor, border=1, ln=True)

        self.ln(5)
        self.set_font("Arial", "B", 12)
        self.cell(0, 10, "4. Dados Gerais das P√°s", ln=True)
        self.set_font("Arial", "", 11)
        for rotulo, valor in dados_pas.items():
            self.cell(60, 10, rotulo, border=1)
            self.cell(130, 10, valor, border=1, ln=True)

        self.ln(5)

# ------------------------ 5. Nomenclaturas -------------------------------------
    def pagina_nomenclaturas(self): 
        self.add_page()
        self.set_font("Arial", "B", 12)
        self.cell(0, 10, "5. Nomenclaturas", ln=True)
        if os.path.exists("nomenclaturas.png"):
            self.image("nomenclaturas.png", x=10, w=190)
        else:
            self.set_font("Arial", "I", 11)
            self.multi_cell(0, 10, "Imagem de nomenclaturas n√£o encontrada.")



  # -------------- 6. Itens das P√°s a Serem Inspecionados -----------------------------

    def pagina_itens_referencia_identificacao(self, imagem_maquina_path=None):
        self.add_page()
        self.set_font("Arial", "B", 12)
        self.cell(0, 10, "6. Itens das P√°s a Serem Inspecionados", ln=True)

        
        itens = [
            ("Extradorso", "E.D."),
            ("Intradorso", "I.D"),
            ("Bordo de Ataque", "B.A."),
            ("Bordo de Fuga", "B.F."),
            ("Tip", "T.P."),
            ("Raiz", "R.A."),
            ("Almas (B.A e B.F)", "A.B.A, A.B.F"),
            ("√Åreas de Colagens (B.A e B.F)", "B.A.C, B.F.C"),
            ("SPDA", "SPDA")
        ]

        for nome, sigla in itens:   # Cria uma c√©lula para cada item
            self.set_fill_color(220, 230, 241) # Cor de fundo azul claro
            self.set_font("Arial", "B", 12) # Define a fonte para o t√≠tulo
            self.cell(80, 10, nome, border=1, fill=True, align="C") # Cria c√©lula com borda e fundo azul claro
            self.set_font("Arial", "", 11) # Define a fonte para o conte√∫do
            self.cell(110, 10, sigla, border=1, ln=True) # Cria c√©lula com borda e quebra de linha (ln=True)

   # ----------------- 7. Refer√™ncia da Avalia√ß√£o de Defeitos -----------------------------------------
        self.ln(5)
        self.set_font("Arial", "B", 12)
        self.cell(0, 10, "7. Refer√™ncia da Avalia√ß√£o de Defeitos", ln=True)

        referencias = [
            ("1", (144, 238, 144), "Danos leves", "Opera√ß√£o normal"),
            ("2", (255, 255, 0), "Danos m√©dios", "Reparo planejado"),
            ("3", (255, 0, 0), "Danos Graves", "Reparo imediato"),
            ("4", (0, 0, 0), "Danos Cr√≠ticos", "Parar o aerogerador")
        ]

    
        for ref, cor, desc, acao in referencias:
            self.set_font("Arial", "", 11)
            self.cell(20, 10, ref, border=1, align="C")
            self.set_fill_color(*cor)
            self.cell(20, 10, "", border=1, fill=True, align="C")
            self.cell(70, 10, desc, border=1, align="C")
            self.cell(80, 10, acao, border=1, ln=True, align="C")



 #-------------- 8. Identifica√ß√£o da M√°quina ----------------------------------------------------------

        self.ln(5)
        self.set_font("Arial", "B", 12)
        self.cell(0, 10, "8. Identifica√ß√£o da M√°quina", ln=True)

        if imagem_maquina_path and os.path.exists(imagem_maquina_path):
            w = 190                 # Largura da imagem
            h = w * 0.2             # Altura proporcional
            x = (self.w - w) / 2    # Centraliza horizontalmente
            y = self.get_y()        # Usa posi√ß√£o vertical atual ap√≥s o t√≠tulo

            self.rect(x, y, w, h)   # Borda ao redor da imagem
            self.image(imagem_maquina_path, x=x + 2, y=y + 2, w=w - 4, h=h - 4)  # Imagem com margens internas
            self.ln(h + 10)         # Espa√ßo abaixo da imagem
        else:
            self.set_font("Arial", "I", 11)
            self.multi_cell(0, 10, "Imagem de identifica√ß√£o da m√°quina n√£o enviada.")


# ------------------------ 9. Especifica√ß√£o e Identifica√ß√£o das P√°s ---------------------
    def pagina_identificacao_pas(self, imagens_p√°s):
        self.add_page()
        self.set_font("Arial", "B", 12)
        self.cell(0, 10, "9. Especifica√ß√£o e Identifica√ß√£o das P√°s", ln=True)
        self.ln(1)

        for nome_pa, lista_imgs in imagens_p√°s.items():
            self.set_font("Arial", "B", 11)
            self.cell(0, 10, nome_pa, ln=True)
            self.ln(2)

            x_inicial = self.get_x()
            y_inicial = self.get_y()
            altura_foto = 60
            largura_foto = 85
            espacamento_x = 10

            for i, img in enumerate(lista_imgs):
                if os.path.exists(img):
                    x = x_inicial + i * (largura_foto + espacamento_x)
                    y = self.get_y()

                    # Desenha o ret√¢ngulo (quadro) para a foto
                    self.rect(x, y, largura_foto, altura_foto)

                    # Insere a imagem dentro do quadro
                    self.image(img, x=x + 2, y=y + 2, w=largura_foto - 4, h=altura_foto - 4)

            self.ln(altura_foto + 1)  # espa√ßo abaixo das fotos antes da pr√≥xima P√Å



      
    #----------------------- 10. Expe√ß√£o externa e 10.1 Classifica√ß√£o de Defeitos Pa1, Pa2 e Pa3 -------------------

    
    def pagina_inspecao_externa(self, numero_pa, tabela): 
        self.add_page()

        self.set_font("Arial", "B", 12)
        self.cell(0, 10, "10. Inspe√ß√£o Externa", ln=True)
        self.ln(2)

        self.set_font("Arial", "B", 12)
        self.cell(0, 10, f"10.{numero_pa}. Classifica√ß√£o de defeitos evidenciados na √°rea externa da p√° {numero_pa}", ln=True)
        self.ln(2)

        self.set_font("Arial", "B", 10)
        self.cell(50, 10, "Localiza√ß√£o", border=1)
        self.cell(70, 10, "Descri√ß√£o dos danos/ evid√™ncias", border=1)
        self.cell(30, 10, "√Årea", border=1)
        self.cell(40, 10, "Cod. / Cor", border=1, ln=True)

        self.set_font("Arial", "", 10)
        for linha in tabela:
            self.cell(50, 10, linha["Localizacao"], border=1)
            self.cell(70, 10, linha["Descricao"], border=1)
            self.cell(30, 10, linha["Area"], border=1)
            self.cell(40, 10, linha["CodCor"], border=1, ln=True)
            self.ln(0)  # Adiciona um espa√ßo entre as linhas da tabela


    def pagina_inspecao_fotos(self, numero_pa, imagens_obs): 
        #self.add_page()
        self.set_font("Arial", "B", 12)

        topicos = [
            ("Superf√≠cie da p√° lado suc√ß√£o", 2),
            ("Receptores do SPDA lado suc√ß√£o", 2),
            ("B.A lado da suc√ß√£o", 2),
            ("Superf√≠cie do B.A", 4),
            ("Superf√≠cie da p√° lado da press√£o", 4),
            ("Receptores do SPDA lado da press√£o", 2),
            ("Superf√≠cie no B.A lado da press√£o", 2),
        ]

        for i, (titulo, qtd_max) in enumerate(topicos):
            self.cell(0, 10, f"10.{numero_pa}.{i+1} {titulo}", ln=True)
            self.ln(3)
            imagens, obs = imagens_obs.get(titulo, ([], ""))
            self._inserir_imagens_com_obs(imagens, obs, max_img=qtd_max)


    def pagina_inspecao_externa_pa1(self, tabela_pa1):
        self.add_page()
        self.set_font("Arial", "B", 12)
        self.cell(0, 10, "10. Inspe√ß√£o Externa", ln=True)
        self.ln(3)

        self.set_font("Arial", "B", 11)
        self.cell(0, 10, "10.1. Classifica√ß√£o de defeitos evidenciados na √°rea externa da p√° 1", ln=True)
        self.ln(5)

        # Cabe√ßalhos da tabela
        self.set_font("Arial", "B", 10)
        self.cell(50, 10, "Localiza√ß√£o", border=1, align="C")
        self.cell(70, 10, "Descri√ß√£o dos danos/ evid√™ncias", border=1, align="C")
        self.cell(30, 10, "√Årea", border=1, align="C")
        self.cell(40, 10, "Cod. / Cor", border=1, ln=True, align="C")

        # Linhas da tabela preenchidas a partir do dicion√°rio
        self.set_font("Arial", "", 10)
        for linha in tabela_pa1:
            self.cell(50, 10, linha["Localizacao"], border=1)
            self.cell(70, 10, linha["Descricao"], border=1)
            self.cell(30, 10, linha["Area"], border=1)
            self.cell(40, 10, linha["CodCor"], border=1, ln=True)

    def pagina_inspecao_externa_pa2(self, tabela_pa2):
        self.add_page()
        self.set_font("Arial", "B", 12)
        self.cell(0, 10, "10.2. Classifica√ß√£o de defeitos evidenciados na √°rea externa da p√° 2", ln=True)
        self.ln(5)

        self.set_font("Arial", "B", 10)
        self.cell(50, 10, "Localiza√ß√£o", border=1)
        self.cell(70, 10, "Descri√ß√£o dos danos/ evid√™ncias", border=1)
        self.cell(30, 10, "√Årea", border=1)
        self.cell(40, 10, "Cod. / Cor", border=1, ln=True)

        self.set_font("Arial", "", 10)
        for linha in tabela_pa2:
            self.cell(50, 10, linha["Localizacao"], border=1)
            self.cell(70, 10, linha["Descricao"], border=1)
            self.cell(30, 10, linha["Area"], border=1)
            self.cell(40, 10, linha["CodCor"], border=1, ln=True)

    def pagina_inspecao_externa_pa3(self, tabela_pa3):
        self.add_page()
        self.set_font("Arial", "B", 12)
        self.cell(0, 10, "10.3. Classifica√ß√£o de defeitos evidenciados na √°rea externa da p√° 3", ln=True)
        self.ln(5)

        self.set_font("Arial", "B", 10)
        self.cell(50, 10, "Localiza√ß√£o", border=1)
        self.cell(70, 10, "Descri√ß√£o dos danos/ evid√™ncias", border=1)
        self.cell(30, 10, "√Årea", border=1)
        self.cell(40, 10, "Cod. / Cor", border=1, ln=True)

        self.set_font("Arial", "", 10)
        for linha in tabela_pa3:
            self.cell(50, 10, linha["Localizacao"], border=1)
            self.cell(70, 10, linha["Descricao"], border=1)
            self.cell(30, 10, linha["Area"], border=1)
            self.cell(40, 10, linha["CodCor"], border=1, ln=True)



    def _inserir_imagens_com_obs(self, lista_imagens, observacao, max_img=2):
        largura_img = 90 if max_img == 2 else 90
        altura_img = 60
        espacamento = 10

        for i, img in enumerate(lista_imagens[:max_img]):
            if os.path.exists(img):
                x = 10 + i * (largura_img + espacamento)
                y = self.get_y()
                self.rect(x, y, largura_img, altura_img)
                self.image(img, x + 2, y + 2, w=largura_img - 4, h=altura_img - 4)
        self.ln(altura_img + 5)

        self.ln(10)  # Espa√ßo entre as imagens e a observa√ß√£o
        self.set_font("Arial", "I", 11)
        self.multi_cell(0, 8, f"Observa√ß√µes: {observacao or '-'}")
        self.ln(10)

    def pagina_inspecao_completa_pa(self, numero_pa, tabela, imagens_obs):
        self.pagina_inspecao_externa(numero_pa, tabela)
        self.pagina_inspecao_fotos(numero_pa, imagens_obs)

        topicos = [
            ("Superf√≠cie da p√° lado suc√ß√£o", 2),
            ("Receptores do SPDA lado suc√ß√£o", 2),
            ("B.A lado da suc√ß√£o", 2),
            ("Superf√≠cie do B.A", 4),
            ("Superf√≠cie da p√° lado da press√£o", 4),
            ("Receptores do SPDA lado da press√£o", 2),
            ("Superf√≠cie no B.A lado da press√£o", 2),
        ]

        for i, (titulo, max_img) in enumerate(topicos):
            self.cell(0, 10, f"10.{numero_pa}.{i+1} {titulo}", ln=True)
            self.ln(3)
            imagens, obs = imagens_obs.get(titulo, ([], ""))
            self._inserir_imagens_com_obs(imagens, obs, max_img=max_img)

# ------------------------ 11. Inspe√ß√£o Interna -------------------------------------

    def pagina_inspecao_interna_completa_pa(self, numero_pa, fotos_identificacao, tabela_defeitos, imagens_obs):
        self.add_page()
        self.set_font("Arial", "B", 12)
        self.cell(0, 10, f"11. Inspe√ß√£o Interna - P√° {numero_pa}", ln=True)
        self.ln(5)

        # 11.1 Identifica√ß√£o da p√°
        self.set_font("Arial", "B", 11)
        self.cell(0, 10, "11.1 Identifica√ß√£o da p√°", ln=True)
        self.ln(2)

        largura_img = 90
        altura_img = 60
        espacamento = 10

        for i, img in enumerate(fotos_identificacao[:2]):
            if os.path.exists(img):
                x = 10 + i * (largura_img + espacamento)
                y = self.get_y()
                self.rect(x, y, largura_img, altura_img)
                self.image(img, x + 2, y + 2, w=largura_img - 4, h=altura_img - 4)

        self.ln(altura_img + 5)

        # 11.2 Classifica√ß√£o de defeitos evidenciados
        self.set_font("Arial", "B", 11)
        self.cell(0, 10, f"11.2 Classifica√ß√£o de defeitos evidenciados na √°rea interna da p√° {numero_pa}", ln=True)
        self.ln(3)

        self.set_font("Arial", "B", 10)
        self.set_fill_color(220, 230, 241)
        self.cell(50, 10, "Localiza√ß√£o", border=1, fill=True, align="C")
        self.cell(70, 10, "Descri√ß√£o dos danos/ evid√™ncias", border=1, fill=True, align="C")
        self.cell(30, 10, "√Årea", border=1, fill=True, align="C")
        self.cell(40, 10, "Cor", border=1, fill=True, align="C")
        self.ln()

        self.set_font("Arial", "", 10)
        for linha in tabela_defeitos:
            self.cell(50, 10, linha["Localizacao"], border=1)
            self.cell(70, 10, linha["Descricao"], border=1)
            self.cell(30, 10, linha["Area"], border=1)
            self.cell(40, 10, linha["Cor"], border=1)
            self.ln()

        self.ln(5)

        # Subitens com fotos
        topicos = [
            f"11.2.1 B.A N√£o apresenta falhas de colagem vis√≠veis",
            f"11.2.2 Superf√≠cie entre as almas do B.F e Alma do B.A",
            f"11.2.3 Coletores do SPDA",
            f"11.2.4 B.F n√£o apresenta falhas de colagem vis√≠veis"
        ]

        for i, titulo in enumerate(topicos):
            self.set_font("Arial", "B", 11)
            self.cell(0, 10, titulo, ln=True)
            self.ln(3)

            imagens, obs = imagens_obs.get(titulo, ([], ""))
            self._inserir_imagens_com_obs(imagens, obs, max_img=2)



# -----------------------CAMPOS DE ENTRADA PARA O USU√ÅRIO VIA STREAMLIT-------------------------------

#------------------------ Inputs Primeira pagina --------------------------------
st.subheader("üìÑ Dados da Capa do Relat√≥rio")

ambito_aplicacao = st.text_input("√Çmbito da Aplica√ß√£o:", value="Complexo E√≥lico Cutia - WTG SM2-09")
codigo_relatorio = st.text_input("C√≥digo do Relat√≥rio:", value="IQONY-INSP-01")
revisado_por_1 = st.text_input("Revisado por (1¬™ Revis√£o):", value="")
revisado_por_2 = st.text_input("Revisado por (2¬™ Revis√£o):", value="")
data_revisao = st.text_input("Data da Revis√£o:", value="12/04/2025")

# ------------------------ Inputs Dados Gerais do Aerogerador ----------------------------

st.subheader("üîß 3. Dados Gerais do Aerogerador")
fabricante_modelo = st.text_input("Fabricante Modelo:")
modelo = st.text_input("Modelo:")
ano_fabricacao = st.text_input("Ano de Fabrica√ß√£o:")
altura_torre = st.text_input("Altura da Torre:")

st.subheader("üîß 4. Dados Gerais das P√°s")
fabricante_pas = st.text_input("Fabricante:")
tipo_pa = st.text_input("Tipo de P√° de Rotor:")
num_serie_pas = st.text_input("N√∫mero de S√©rie das P√°s:")
num_serie_set = st.text_input("N√∫mero de S√©rie do Set:")
elementos_fluxo = st.text_input("Elementos de Fluxo de Ar:")
dispositivos_luz = st.text_input("Dispositivos de ilumina√ß√£o:")


#-------------------------------------- Inputs Nomenclaturas -------------------------------------
# üì∏ SE√á√ÉO 8 ‚Äì IDENTIFICA√á√ÉO DA M√ÅQUINA
st.subheader("üì∏ 8. Identifica√ß√£o da M√°quina")

with st.container():
    st.markdown("**üì∑ Envie uma imagem da m√°quina para o relat√≥rio**")
    
    imagem_maquina = st.file_uploader(
        "Selecione a imagem (PNG ou JPG)", 
        type=["jpg", "jpeg", "png"]
    )

    imagem_maquina_path = None
    if imagem_maquina:
        # Detecta a extens√£o correta a partir do tipo MIME
        extensao = imagem_maquina.type.split("/")[-1]
        imagem_maquina_path = f"imagem_maquina.{extensao}"

        # Salva o arquivo corretamente com a extens√£o original
        with open(imagem_maquina_path, "wb") as f:
            f.write(imagem_maquina.read())

        # Mostra imagem carregada abaixo
        st.image(imagem_maquina, caption="Imagem carregada", use_column_width=True)

st.subheader("üì∑ 9. Especifica√ß√£o e Identifica√ß√£o das P√°s")

imagens_p√°s = {}

# Loop para as 3 p√°s
for i in range(1, 4): # Loop de 1 a 3 para as p√°s
    with st.container(): # Cria um container para cada p√°
        st.markdown(f"### üìå P√Å {i}")   ## T√≠tulo para cada p√°
        fotos = st.file_uploader( # Carrega as fotos da p√°
            f"Envie at√© 2 fotos para a P√Å {i}", # T√≠tulo do uploader
            type=["jpg", "jpeg", "png"], # Tipo de arquivo aceito
            accept_multiple_files=True, # Aceita m√∫ltiplos arquivos
            key=f"foto_pa_{i}" # Chave √∫nica para cada p√°
        )

        caminhos = [] # Lista para armazenar os caminhos das fotos
        for j, foto in enumerate(fotos[:2]):  # Limita a 2 fotos
            extensao = foto.type.split("/")[-1] # Detecta a extens√£o correta
            caminho = f"foto_pa_{i}_{j}.{extensao}" # Cria o caminho do arquivo
            with open(caminho, "wb") as f: # Abre o arquivo para escrita
                f.write(foto.read()) # Salva o arquivo
            caminhos.append(caminho) # Adiciona o caminho √† lista

        # Exibe as imagens carregadas
        if caminhos: ## Verifica se h√° imagens carregadas
            st.image(caminhos, width=300, caption=[f"P√Å {i} - Foto {j+1}" for j in range(len(caminhos))]) # Mostra as imagens carregadas, com legenda, witdh=300 (largura 300px)

        imagens_p√°s[f"P√Å {i}"] = caminhos  # Guarda os caminhos por p√°
        




            # - item 10 

       

st.subheader("üîç 10. Inspe√ß√£o Externa - Classifica√ß√£o de Defeitos (P√Å 1)")

# Lista das localiza√ß√µes da p√°
localizacoes = ["R.A Ping Teste", "N/A", "I.D", "E. D", "B. A", "B. F", "TIP", "SPDA"]

# Lista para armazenar os dados preenchidos
tabela_externa_pa1 = []

# Gera campos de entrada para cada linha da tabela
for loc in localizacoes:
    st.markdown(f"**üìå Localiza√ß√£o: {loc}**")
    desc = st.text_input(f"Descri√ß√£o dos danos/evid√™ncias - {loc}", key=f"desc_{loc}")
    area = st.text_input(f"√Årea - {loc}", key=f"area_{loc}")
    cod_cor = st.text_input(f"C√≥d./Cor - {loc}", key=f"cod_{loc}")
    
    # Armazena os dados para o PDF
    tabela_externa_pa1.append({
        "Localizacao": loc,
        "Descricao": desc,
        "Area": area,
        "CodCor": cod_cor
    })

st.markdown("---")

st.subheader("üîç 10.2. Inspe√ß√£o Externa - Classifica√ß√£o de Defeitos (P√Å 2)")
tabela_externa_pa2 = []
for loc in localizacoes:
    st.markdown(f"**üìå Localiza√ß√£o: {loc} (P√Å 2)**")
    desc = st.text_input(f"Descri√ß√£o dos danos/evid√™ncias - {loc} (P√Å 2)", key=f"desc_pa2_{loc}")
    area = st.text_input(f"√Årea - {loc} (P√Å 2)", key=f"area_pa2_{loc}")
    cod_cor = st.text_input(f"C√≥d./Cor - {loc} (P√Å 2)", key=f"cod_pa2_{loc}")
    tabela_externa_pa2.append({
        "Localizacao": loc,
        "Descricao": desc,
        "Area": area,
        "CodCor": cod_cor
    })

st.subheader("üîç 10.3. Inspe√ß√£o Externa - Classifica√ß√£o de Defeitos (P√Å 3)")
tabela_externa_pa3 = []
for loc in localizacoes:
    st.markdown(f"**üìå Localiza√ß√£o: {loc} (P√Å 3)**")
    desc = st.text_input(f"Descri√ß√£o dos danos/evid√™ncias - {loc} (P√Å 3)", key=f"desc_pa3_{loc}")
    area = st.text_input(f"√Årea - {loc} (P√Å 3)", key=f"area_pa3_{loc}")
    cod_cor = st.text_input(f"C√≥d./Cor - {loc} (P√Å 3)", key=f"cod_pa3_{loc}")
    tabela_externa_pa3.append({
        "Localizacao": loc,
        "Descricao": desc,
        "Area": area,
        "CodCor": cod_cor
    })

        # 10.1.1

# ----------------------------- P√Å 1 ----------------------------- Fotos e Observa√ß√µes
st.subheader("üì∏ 10.1 Inspe√ß√£o Externa - P√Å 1")

# 10.1.1
st.subheader("üì∏ 10.1.1 Superf√≠cie da p√° lado suc√ß√£o (P√Å 1)")
fotos_pa1_superficie = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa1_superficie")
obs_pa1_superficie = st.text_area("Observa√ß√µes - Superf√≠cie da p√° lado suc√ß√£o (P√Å 1)", key="obs_pa1_superficie")

# 10.1.2
st.subheader("üì∏ 10.1.2 Receptores do SPDA lado suc√ß√£o (P√Å 1)")
fotos_pa1_spda = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa1_spda")
obs_pa1_spda = st.text_area("Observa√ß√µes - Receptores SPDA lado suc√ß√£o (P√Å 1)", key="obs_pa1_spda")

# 10.1.3
st.subheader("üì∏ 10.1.3 B.A lado da suc√ß√£o (P√Å 1)")
fotos_pa1_ba_succao = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa1_ba_succao")
obs_pa1_ba_succao = st.text_area("Observa√ß√µes - B.A lado da suc√ß√£o (P√Å 1)", key="obs_pa1_ba_succao")

# 10.1.4
st.subheader("üì∏ 10.1.4 Superf√≠cie do B.A (P√Å 1)")
fotos_pa1_ba_surface = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa1_ba_surface")
obs_pa1_ba_surface = st.text_area("Observa√ß√µes - Superf√≠cie do B.A (P√Å 1)", key="obs_pa1_ba_surface")

# 10.1.5
st.subheader("üì∏ 10.1.5 Superf√≠cie da p√° lado da press√£o (P√Å 1)")
fotos_pa1_pressao = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa1_pressao")
obs_pa1_pressao = st.text_area("Observa√ß√µes - Superf√≠cie da p√° lado da press√£o (P√Å 1)", key="obs_pa1_pressao")

# 10.1.6
st.subheader("üì∏ 10.1.6 Receptores do SPDA lado da press√£o (P√Å 1)")
fotos_pa1_spda_pressao = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa1_spda_pressao")
obs_pa1_spda_pressao = st.text_area("Observa√ß√µes - Receptores do SPDA lado da press√£o (P√Å 1)", key="obs_pa1_spda_pressao")

# 10.1.7
st.subheader("üì∏ 10.1.7 Superf√≠cie no B.A lado da press√£o (P√Å 1)")
fotos_pa1_ba_pressao = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa1_ba_pressao")
obs_pa1_ba_pressao = st.text_area("Observa√ß√µes - Superf√≠cie no B.A lado da press√£o (P√Å 1)", key="obs_pa1_ba_pressao")


# ----------------------------- P√Å 2 ----------------------------- fotos e Observa√ß√µes
st.subheader("üì∏ 10.2 Inspe√ß√£o Externa - P√Å 2")

# 10.2.1
st.subheader("üì∏ 10.2.1 Superf√≠cie da p√° lado suc√ß√£o (P√Å 2)")
fotos_pa2_superficie = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa2_superficie")
obs_pa2_superficie = st.text_area("Observa√ß√µes - Superf√≠cie da p√° lado suc√ß√£o (P√Å 2)", key="obs_pa2_superficie")

# 10.2.2
st.subheader("üì∏ 10.2.2 Receptores do SPDA lado suc√ß√£o (P√Å 2)")
fotos_pa2_spda = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa2_spda")
obs_pa2_spda = st.text_area("Observa√ß√µes - Receptores SPDA lado suc√ß√£o (P√Å 2)", key="obs_pa2_spda")

# 10.2.3
st.subheader("üì∏ 10.2.3 B.A lado da suc√ß√£o (P√Å 2)")
fotos_pa2_ba_succao = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa2_ba_succao")
obs_pa2_ba_succao = st.text_area("Observa√ß√µes - B.A lado da suc√ß√£o (P√Å 2)", key="obs_pa2_ba_succao")

# 10.2.4
st.subheader("üì∏ 10.2.4 Superf√≠cie do B.A (P√Å 2)")
fotos_pa2_ba_surface = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa2_ba_surface")
obs_pa2_ba_surface = st.text_area("Observa√ß√µes - Superf√≠cie do B.A (P√Å 2)", key="obs_pa2_ba_surface")

# 10.2.5
st.subheader("üì∏ 10.2.5 Superf√≠cie da p√° lado da press√£o (P√Å 2)")
fotos_pa2_pressao = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa2_pressao")
obs_pa2_pressao = st.text_area("Observa√ß√µes - Superf√≠cie da p√° lado da press√£o (P√Å 2)", key="obs_pa2_pressao")

# 10.2.6
st.subheader("üì∏ 10.2.6 Receptores do SPDA lado da press√£o (P√Å 2)")
fotos_pa2_spda_pressao = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa2_spda_pressao")
obs_pa2_spda_pressao = st.text_area("Observa√ß√µes - Receptores do SPDA lado da press√£o (P√Å 2)", key="obs_pa2_spda_pressao")

# 10.2.7
st.subheader("üì∏ 10.2.7 Superf√≠cie no B.A lado da press√£o (P√Å 2)")
fotos_pa2_ba_pressao = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa2_ba_pressao")
obs_pa2_ba_pressao = st.text_area("Observa√ß√µes - Superf√≠cie no B.A lado da press√£o (P√Å 2)", key="obs_pa2_ba_pressao")

# ----------------------------- P√Å 3 ----------------------------- fotos e Observa√ß√µes
st.subheader("üì∏ 10.3 Inspe√ß√£o Externa - P√Å 3")

# 10.3.1
st.subheader("üì∏ 10.3.1 Superf√≠cie da p√° lado suc√ß√£o (P√Å 3)")
fotos_pa3_superficie = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa3_superficie")
obs_pa3_superficie = st.text_area("Observa√ß√µes - Superf√≠cie da p√° lado suc√ß√£o (P√Å 3)", key="obs_pa3_superficie")

# 10.3.2
st.subheader("üì∏ 10.3.2 Receptores do SPDA lado suc√ß√£o (P√Å 3)")
fotos_pa3_spda = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa3_spda")
obs_pa3_spda = st.text_area("Observa√ß√µes - Receptores SPDA lado suc√ß√£o (P√Å 3)", key="obs_pa3_spda")

# 10.3.3
st.subheader("üì∏ 10.3.3 B.A lado da suc√ß√£o (P√Å 3)")
fotos_pa3_ba_succao = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa3_ba_succao")
obs_pa3_ba_succao = st.text_area("Observa√ß√µes - B.A lado da suc√ß√£o (P√Å 3)", key="obs_pa3_ba_succao")

# 10.3.4
st.subheader("üì∏ 10.3.4 Superf√≠cie do B.A (P√Å 3)")
fotos_pa3_ba_surface = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa3_ba_surface")
obs_pa3_ba_surface = st.text_area("Observa√ß√µes - Superf√≠cie do B.A (P√Å 3)", key="obs_pa3_ba_surface")

# 10.3.5
st.subheader("üì∏ 10.3.5 Superf√≠cie da p√° lado da press√£o (P√Å 3)")
fotos_pa3_pressao = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa3_pressao")
obs_pa3_pressao = st.text_area("Observa√ß√µes - Superf√≠cie da p√° lado da press√£o (P√Å 3)", key="obs_pa3_pressao")

# 10.3.6
st.subheader("üì∏ 10.3.6 Receptores do SPDA lado da press√£o (P√Å 3)")
fotos_pa3_spda_pressao = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa3_spda_pressao")
obs_pa3_spda_pressao = st.text_area("Observa√ß√µes - Receptores do SPDA lado da press√£o (P√Å 3)", key="obs_pa3_spda_pressao")

# 10.3.7
st.subheader("üì∏ 10.3.7 Superf√≠cie no B.A lado da press√£o (P√Å 3)")
fotos_pa3_ba_pressao = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="pa3_ba_pressao")
obs_pa3_ba_pressao = st.text_area("Observa√ß√µes - Superf√≠cie no B.A lado da press√£o (P√Å 3)", key="obs_pa3_ba_pressao")



# ----------------------------- Dicion√°rios de imagens e observa√ß√µes -----------------------------


# Fun√ß√£o para salvar imagens
def salvar_imagens(fotos, prefixo, limite=2):
    caminhos = []
    if fotos:
        for i, foto in enumerate(fotos[:limite]):
            if foto is not None:
                extensao = foto.type.split("/")[-1]
                caminho = f"{prefixo}_{i}.{extensao}"
                try:
                    conteudo = foto.read()
                    if conteudo:
                        with open(caminho, "wb") as f:
                            f.write(conteudo)
                        caminhos.append(caminho)
                except Exception as e:
                    st.error(f"Erro ao salvar imagem: {foto.name} - {e}")
    return caminhos

# -------------------------- Salvar imagens por P√Å --------------------------

# Salva imagens da P√Å 1
caminhos_pa1_superficie = salvar_imagens(fotos_pa1_superficie, "pa1_superficie", 2)
caminhos_pa1_spda = salvar_imagens(fotos_pa1_spda, "pa1_spda", 2)
caminhos_pa1_ba_succao = salvar_imagens(fotos_pa1_ba_succao, "pa1_ba_succao", 2)
caminhos_pa1_ba_surface = salvar_imagens(fotos_pa1_ba_surface, "pa1_ba_surface", 2)
caminhos_pa1_pressao = salvar_imagens(fotos_pa1_pressao, "pa1_pressao", 2)
caminhos_pa1_spda_pressao = salvar_imagens(fotos_pa1_spda_pressao, "pa1_spda_pressao", 2)
caminhos_pa1_ba_pressao = salvar_imagens(fotos_pa1_ba_pressao, "pa1_ba_pressao", 2)

# Salva imagens da P√Å 2
caminhos_pa2_superficie = salvar_imagens(fotos_pa2_superficie, "pa2_superficie", 2)
caminhos_pa2_spda = salvar_imagens(fotos_pa2_spda, "pa2_spda", 2)
caminhos_pa2_ba_succao = salvar_imagens(fotos_pa2_ba_succao, "pa2_ba_succao", 2)
caminhos_pa2_ba_surface = salvar_imagens(fotos_pa2_ba_surface, "pa2_ba_surface", 2)
caminhos_pa2_pressao = salvar_imagens(fotos_pa2_pressao, "pa2_pressao", 2)
caminhos_pa2_spda_pressao = salvar_imagens(fotos_pa2_spda_pressao, "pa2_spda_pressao", 2)
caminhos_pa2_ba_pressao = salvar_imagens(fotos_pa2_ba_pressao, "pa2_ba_pressao", 2)

# Salva imagens da P√Å 3
caminhos_pa3_superficie = salvar_imagens(fotos_pa3_superficie, "pa3_superficie", 2)
caminhos_pa3_spda = salvar_imagens(fotos_pa3_spda, "pa3_spda", 2)
caminhos_pa3_ba_succao = salvar_imagens(fotos_pa3_ba_succao, "pa3_ba_succao", 2)
caminhos_pa3_ba_surface = salvar_imagens(fotos_pa3_ba_surface, "pa3_ba_surface", 2)
caminhos_pa3_pressao = salvar_imagens(fotos_pa3_pressao, "pa3_pressao", 2)
caminhos_pa3_spda_pressao = salvar_imagens(fotos_pa3_spda_pressao, "pa3_spda_pressao", 2)
caminhos_pa3_ba_pressao = salvar_imagens(fotos_pa3_ba_pressao, "pa3_ba_pressao", 2)

# -------------------------- Dicion√°rios de imagens e observa√ß√µes por P√Å --------------------------

imagens_obs_pa1 = {
    "Superf√≠cie da p√° lado suc√ß√£o": (caminhos_pa1_superficie, obs_pa1_superficie),
    "Receptores do SPDA lado suc√ß√£o": (caminhos_pa1_spda, obs_pa1_spda),
    "B.A lado da suc√ß√£o": (caminhos_pa1_ba_succao, obs_pa1_ba_succao),
    "Superf√≠cie do B.A": (caminhos_pa1_ba_surface, obs_pa1_ba_surface),
    "Superf√≠cie da p√° lado da press√£o": (caminhos_pa1_pressao, obs_pa1_pressao),
    "Receptores do SPDA lado da press√£o": (caminhos_pa1_spda_pressao, obs_pa1_spda_pressao),
    "Superf√≠cie no B.A lado da press√£o": (caminhos_pa1_ba_pressao, obs_pa1_ba_pressao),
}

imagens_obs_pa2 = {
    "Superf√≠cie da p√° lado suc√ß√£o": (caminhos_pa2_superficie, obs_pa2_superficie),
    "Receptores do SPDA lado suc√ß√£o": (caminhos_pa2_spda, obs_pa2_spda),
    "B.A lado da suc√ß√£o": (caminhos_pa2_ba_succao, obs_pa2_ba_succao),
    "Superf√≠cie do B.A": (caminhos_pa2_ba_surface, obs_pa2_ba_surface),
    "Superf√≠cie da p√° lado da press√£o": (caminhos_pa2_pressao, obs_pa2_pressao),
    "Receptores do SPDA lado da press√£o": (caminhos_pa2_spda_pressao, obs_pa2_spda_pressao),
    "Superf√≠cie no B.A lado da press√£o": (caminhos_pa2_ba_pressao, obs_pa2_ba_pressao),
}

imagens_obs_pa3 = {
    "Superf√≠cie da p√° lado suc√ß√£o": (caminhos_pa3_superficie, obs_pa3_superficie),
    "Receptores do SPDA lado suc√ß√£o": (caminhos_pa3_spda, obs_pa3_spda),
    "B.A lado da suc√ß√£o": (caminhos_pa3_ba_succao, obs_pa3_ba_succao),
    "Superf√≠cie do B.A": (caminhos_pa3_ba_surface, obs_pa3_ba_surface),
    "Superf√≠cie da p√° lado da press√£o": (caminhos_pa3_pressao, obs_pa3_pressao),
    "Receptores do SPDA lado da press√£o": (caminhos_pa3_spda_pressao, obs_pa3_spda_pressao),
    "Superf√≠cie no B.A lado da press√£o": (caminhos_pa3_ba_pressao, obs_pa3_ba_pressao),
}

          
# ----------------------------- INSPE√á√ÉO INTERNA -----------------------------
st.subheader("üì∏ 11.1 Identifica√ß√£o da p√° 1")
fotos_identificacao_pa1 = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="ident_pa1")
caminhos_ident_pa1 = salvar_imagens(fotos_identificacao_pa1, "ident_pa1", limite=2)

st.subheader("üì∏ 11.1 Identifica√ß√£o da p√° 2")
fotos_identificacao_pa2 = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="ident_pa2")
caminhos_ident_pa2 = salvar_imagens(fotos_identificacao_pa2, "ident_pa2", limite=2)

st.subheader("üì∏ 11.1 Identifica√ß√£o da p√° 3")
fotos_identificacao_pa3 = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key="ident_pa3")
caminhos_ident_pa3 = salvar_imagens(fotos_identificacao_pa3, "ident_pa3", limite=2)

def tabela_defeitos_interna(numero_pa):
    st.subheader(f"üìã 11.2 Tabela de Defeitos - P√Å {numero_pa}")
    tabela = []
    localizacoes = ["C.E.", "B.F.", "B.F.C.", "I.D.B.F.", "E.D.B. F.", "A.B.F.", 
                    "I.D.E.A.", "A.B.A.", "I.D.B.A.", "E.D.B.A.", "B.A.", "B.A.C"]

    for loc in localizacoes:
        st.markdown(f"**üìå Localiza√ß√£o: {loc} (P√Å {numero_pa})**")
        desc = st.text_input(f"Descri√ß√£o dos danos/evid√™ncias - {loc} (P√Å {numero_pa})", key=f"desc_def_pa{numero_pa}_{loc}")
        area = st.text_input(f"√Årea - {loc} (P√Å {numero_pa})", key=f"area_def_pa{numero_pa}_{loc}")
        cor = st.text_input(f"Cor - {loc} (P√Å {numero_pa})", key=f"cor_def_pa{numero_pa}_{loc}")
        tabela.append({
            "Localizacao": loc,
            "Descricao": desc or "OK",
            "Area": area or "-",
            "Cor": cor or "-"
        })
    return tabela

# Tabelas para cada p√°
tabela_defeitos_pa1 = tabela_defeitos_interna(1)
tabela_defeitos_pa2 = tabela_defeitos_interna(2)
tabela_defeitos_pa3 = tabela_defeitos_interna(3)


def bloco_obs_fotos_interna(pa_num):
    st.subheader(f"üì∑ 11.2 Itens com evid√™ncias fotogr√°ficas - P√Å {pa_num}")
    imagens_obs = {}
    topicos = [
        "11.2.1 B.A N√£o apresenta falhas de colagem vis√≠veis",
        "11.2.2 Superf√≠cie entre as almas do B.F e Alma do B.A",
        "11.2.3 Coletores do SPDA",
        "11.2.4 B.F n√£o apresenta falhas de colagem vis√≠veis"
    ]
    for i, titulo in enumerate(topicos):
        st.subheader(f"üì∏ {titulo} (P√Å {pa_num})")
        fotos = st.file_uploader("Envie at√© 2 fotos", type=["jpg", "jpeg", "png"], accept_multiple_files=True, key=f"int_foto_pa{pa_num}_{i}")
        obs = st.text_area(f"Observa√ß√µes - {titulo} (P√Å {pa_num})", key=f"int_obs_pa{pa_num}_{i}")
        caminhos = salvar_imagens(fotos, f"int_pa{pa_num}_{i}", limite=2)
        imagens_obs[titulo] = (caminhos, obs)
    return imagens_obs

# Dicion√°rios com imagens e observa√ß√µes por P√Å
imagens_obs_interna_pa1 = bloco_obs_fotos_interna(1)
imagens_obs_interna_pa2 = bloco_obs_fotos_interna(2)
imagens_obs_interna_pa3 = bloco_obs_fotos_interna(3)



# BOT√ÉO PARA GERAR O RELAT√ìRIO

if st.button("üìÑ Gerar Relat√≥rio em PDF"):
    pdf = PDF()
    pdf.alias_nb_pages()
    pdf.add_page()
    pdf.primeira_pagina(
    ambito_aplicacao,
    codigo_relatorio,
    revisado_por_1,
    revisado_por_2,
    data_revisao
)

    pdf.pagina_sumario()

    dados_gerais = {
        "Fabricante Modelo": fabricante_modelo,
        "Modelo": modelo,
        "Ano de Fabrica√ß√£o": ano_fabricacao,
        "Altura do torre": altura_torre
    }

    dados_pas = {
        "Fabricante": fabricante_pas,
        "Tipo de P√° de Rotor": tipo_pa,
        "N√∫mero de S√©rie das P√°s": num_serie_pas,
        "N√∫mero de S√©rie do Set": num_serie_set,
        "Elementos de Fluxo de Ar": elementos_fluxo,
        "Dispositivos de ilumina√ß√£o": dispositivos_luz
    }

    pdf.pagina_dados(dados_gerais, dados_pas)
    pdf.pagina_nomenclaturas()
    pdf.pagina_itens_referencia_identificacao(imagem_maquina_path)
    pdf.pagina_identificacao_pas(imagens_p√°s)

    # Inspe√ß√£o completa por p√°
    pdf.pagina_inspecao_completa_pa(1, tabela_externa_pa1, imagens_obs_pa1)
    pdf.pagina_inspecao_completa_pa(2, tabela_externa_pa2, imagens_obs_pa2)
    pdf.pagina_inspecao_completa_pa(3, tabela_externa_pa3, imagens_obs_pa3)

    #----------------------------- Inspe√ß√£o Interna -----------------------------
    pdf.pagina_inspecao_interna_completa_pa(1, caminhos_ident_pa1, tabela_defeitos_pa1, imagens_obs_interna_pa1)
    pdf.pagina_inspecao_interna_completa_pa(2, caminhos_ident_pa2, tabela_defeitos_pa2, imagens_obs_interna_pa2)
    pdf.pagina_inspecao_interna_completa_pa(3, caminhos_ident_pa3, tabela_defeitos_pa3, imagens_obs_interna_pa3)


    caminho_pdf = "relatorio_inspecao.pdf"
    pdf.output(caminho_pdf)

    st.success("‚úÖ Relat√≥rio gerado com sucesso!")

    with open(caminho_pdf, "rb") as f:
        st.download_button(
            label="üì• Baixar PDF",
            data=f,
            file_name="relatorio_inspecao.pdf",
            mime="application/pdf"
        )
